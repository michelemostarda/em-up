/*
 * Copyright 2007-2008 Michele Mostarda ( michele.mostarda@gmail.com ).
 * All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the 'License');
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an 'AS IS' BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package com.asemantics.lightparser;

import java.util.ArrayList;
import java.util.List;

/**
 * Defines a {@link com.asemantics.lightparser.Grammar} parser.
 */
public class Parser {

    /**
     * Notifies to every listener the events generated by the <i>Parser</i>.
     */
     class ParserListenerNotifier {

        /**
         * Notifies that the parsing has been started.
         */
        protected void notifyParsingStarted() {
            if( listeners ==  null) {
                return;
            }
            for(ParserListener pl : listeners) {
                try {
                    pl.parsingStarted();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }

        /**
         * Notifies that the parsing has ended.
         */
        protected void notifyParsingEnded() {
            if( listeners ==  null) {
                return;
            }
            for(ParserListener pl : listeners) {
                try {
                    pl.parsingEnded();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }

        /**
         * Notifies that the parser has failed.
         *
         * @param pe the parsing exception.
         */
        protected void notifyParsingFailed(ParserException pe) {
            if( listeners ==  null) {
                return;
            }
            for(ParserListener pl : listeners) {
                try {
                    pl.parsingFailed(pe);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }

        /**
         * Notifies that the next token has been asked.
         *
         * @param t the next token.
         */
        protected void notifyNextTokenAsked(Token t) {
            if( listeners ==  null) {
                return;
            }
            for(ParserListener pl : listeners) {
                try {
                    pl.nextTokenAsked(t);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }

        /**
         * Notifies the beginning of a backtracking.
         *
         * @param ps the production stack.
         */
        protected void notifyBacktrackingStarted(ProductionStack ps) {
            if( listeners ==  null) {
                return;
            }
            for(ParserListener pl : listeners) {
                try {
                    pl.backtrackingStarted(ps);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }

        }

        /**
         * Notifies the end of a backtracking.
         *
         * @param ps the production stack.
         */
        protected void notifyBaktrackingConsumed(ProductionStack ps) {
            if( listeners ==  null) {
                return;
            }
            for(ParserListener pl : listeners) {
                try {
                    pl.backtrackingConsumed(ps);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }

        /**
         * Notifies a backtracking rejection.
         *
         * @param ps the production stack.
         */
        protected void notifyBaktrackingRejected(ProductionStack ps) {
            if( listeners ==  null) {
                return;
            }
            for(ParserListener pl : listeners) {
                try {
                    pl.backtrackingRejected(ps);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }

        /**
         * Notifies a stack in.
         *
         * @param ps
         */
        protected void notifyProductionStackIn(ProductionStack ps) {
            if( listeners ==  null) {
                return;
            }
            for(ParserListener pl : listeners) {
                try {
                    pl.productionStackIn(ps);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }

        /**
         * Notifies a stack out.
         *
         * @param ps
         */
        protected void notifyProductionStackOut(ProductionStack ps) {
            if( listeners ==  null) {
                return;
            }
            for(ParserListener pl : listeners) {
                try {
                    pl.productionStackOut(ps);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }

    }

    /**
     * The grammar to be pased.
     */
    private Grammar   grammar;

    /**
     * The tokenizer feeding this parser.
     */
    private Tokenizer tokenizer;

    /**
     * List of parser listeners.
     */
    private List<ParserListener> listeners;

    /**
     * Listener notifier.
     */
    private ParserListenerNotifier notifier;

    /**
     * Constructor.
     *
     * @param g
     * @param t
     */
    public Parser(Grammar g, Tokenizer t) {
        if(g == null || t == null) {
            throw new IllegalArgumentException();
        }

        grammar = g;
        tokenizer = t;

        notifier = new ParserListenerNotifier();
    }

    /**
     * Parses a given input string returining the associated {@link ParseTree}
     * on the specified root production.
     *
     * @param rootProduction
     * @param input
     * @return parse tree computed on given <i>input</i>.
     * @throws ParserException if the input string doesn't satisfy the grammar.
     */
    public ParseTree parse(Production rootProduction, String input) throws ParserException {

        notifier.notifyParsingStarted();

        try {
            tokenizer.tokenize(input);
        } catch (TokenizerException te) {
            throw new ParserException("Error in initializing tokenizer.", te);
        }

        if( rootProduction == null ) {
            throw new ParserException("Grammar '" + grammar + "' is empty.");
        }

        ParseTree parseTree = new ParseTree(input);

        rootProduction.parse(new ProductionStack(), notifier, tokenizer, parseTree.getRoot(), null );

        // Check that the input stream has been consumed entirely.
        try {
            //TODO: there is an issue with the DONE status management. // if( tokenizer.endReached()) {
            Token restToken = tokenizer.nextToken();
            if( restToken != null) {
                ParserException pe = new ParserException(
                        "Cannot cover the entire stream with the grammar expansion." +
                        " Error at location " + restToken.getLocation()
                );
                notifier.notifyParsingFailed(pe);
                throw pe;
            }
        } catch (TokenizerException te) {
            throw new RuntimeException("Error while accessing tokenizer.");
        }

        notifier.notifyParsingEnded();

        return parseTree;
    }

    /**
     * Parses a given input string returining the associated {@link ParseTree}
     * on the specified root production.
     *
     * @param rootProductionStr name of root production to be applyed.
     * @param input
     * @return parse tree computed on given <i>input</i>
     * @throws ParserException
     */
    public ParseTree parse(String rootProductionStr, String input) throws ParserException {
        Production rootProduction = grammar.getProduction(rootProductionStr);
        return parse(rootProduction, input);
    }

    /**
     * Parses a given input string returining the associated {@link ParseTree}.
     *
     * @param input
     * @return parse tree computed on given <i>input</i>
     * @throws ParserException
     */
    public ParseTree parse(String input) throws ParserException {
        Production rootProduction = grammar.getRootProduction();
        return parse(rootProduction, input);
    }

    /**
     * Adds a parser listener.
     *
     * @param parserListener the listener to add.
     */
    public void addParserListener(ParserListener parserListener) {
        if(listeners == null) {
            listeners = new ArrayList();
        }
        listeners.add(parserListener);
    }

    /**
     * Removes a parser listener.
     *
     * @param parserListener the listener to remove.
     */
    public void removeParserListener(ParserListener parserListener) {
        if(listeners == null) {
            return;
        }
        if(listeners.remove(parserListener) && listeners.isEmpty()) {
            listeners = null;
        }
    }

}
