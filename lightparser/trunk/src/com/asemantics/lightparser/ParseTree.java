/*
 * Copyright 2007-2008 Michele Mostarda ( michele.mostarda@gmail.com ).
 * All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the 'License');
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an 'AS IS' BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package com.asemantics.lightparser;

import java.util.List;
import java.util.ArrayList;

/**
 * Defines a parse tree generated by parsing an input stream
 * with a given {@link com.asemantics.lightparser.Grammar}.
 */
public class ParseTree extends TreeNode {

    /**
     * Constructor.
     *
     * @param generatingString string whom generated this parse tree.
     */
    protected ParseTree(String generatingString) {
        super( generatingString, new DefaultNonTerminal("root"));

    }

    /**
     * Returns the root node.
     *
     * @return root node.
     */
    @Override
    public TreeNode getRoot() {
        return this;
    }

    /**
     * Returns the list of terminal nodes
     * in post-order traversal sequence.
     *
     * @return list of terminal nodes.
     */
    public Terminal[] getTerminalNodes() {
        return getTerminals( getRoot() );
    }


    /**
     * Returns a string reprenseting the content of the tree.
     *
     * @return human readable string representing nodes.
     */
    public String getNodesString() {
        StringBuilder sb = new StringBuilder();
        printNode( getRoot(), sb );
        return sb.toString();
    }

    public String toString() {
        return  this.getClass() + getNodesString();
    }

    /**
     * Populates the given list with terminals children of given
     * tree node, recursing for non terminals.
     *
     * @param tn
     * @param terminals
     */
    private void populateTerminals(TreeNode tn, List<Terminal> terminals) {
        for(TreeNode child : tn.getChildren()) {
            if(child.getTerm() instanceof Terminal) {
                terminals.add( (Terminal) child.getTerm() );
            }
            if( child.getChildrenCount() > 0) {
                populateTerminals(child, terminals);
            }
        }
    }

    /**
     * Returns the list of terminals under given tree node following the
     * order left to right and top to bottom.
     *
     * @param tn
     * @return
     */
    private Terminal[] getTerminals(TreeNode tn) {
        List<Terminal> result = new ArrayList<Terminal>();
        populateTerminals(tn, result);
        return result.toArray( new Terminal[ result.size() ] );
    }

    /**
     * Prints recursivelly a tree node content of the given string builder.
     * 
     * @param node
     * @param sb
     */
    private void printNode(TreeNode node, StringBuilder sb) {
        sb.append("{" );
        final Term nodeTerm = node.getTerm();
        final boolean nodeIsTerminal = nodeTerm instanceof Terminal;
        if( nodeIsTerminal ) {
            sb.append("<").append( nodeTerm.getSimpleName() ).append(">");
        }
        sb.append("'").append( node.getName() ).append("'");
        if( ! nodeIsTerminal || node.getChildrenCount() > 0 ) {
            sb.append("[");
            for( TreeNode child : node.getChildren() ) {
                printNode(child, sb);
            }
            sb.append("]");
        }
        sb.append("}");
    }

}
