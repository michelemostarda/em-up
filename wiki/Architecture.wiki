#labels Featured

This section explains in detail the overall architecture of the MUp Framework.
Every single component is described below.

[http://em-up.googlecode.com/svn/wiki/images/mup-overall-architecture.png]

_The overall architecture of the MUp framework._

==Console==

The Console component is a Web console to interact with a MU Interpreter instance.
This console runs entirely inside the browser, supporting all the functional sets of the language.

  The MUp Console depends on a server only to override the _"Same origin restriction"_
  of browsers that forbid a Javascript to access to a Web resource located at a URL domain 
  different from that from which the Javascript has been downloaded.

==Tools==

The tools module contains some utility instruments meant to improve the user experience of the _Web Console_. 
Currently there are two available tools:

  * a _JSON Inspector_, able to edit / inspect complex JSON data.
  * a _Context Inspector_, meant to access all the predicates defined in the interpreter _Context_,
    retrieve descriptions and so on.

==MU Core== 

The MU Core contains the core functionalities of the MU language. 
The core is composed of the following sub-modules:

===Parser=== 

The parser of the *MU* language. The parsing logic, the _MU_ grammar and the
implementation are described [Parser here].

===Processor===

The processor is an abstract machine able to execute the MU operations 
generated by the Parser.

===Cast Manager===

The Cast Manager module provides support for type morphing. 
The type morphing is a main concept of the _MU_ language and
is described [TypeMorphing here].

===Digester===

The digester module provides an implementation of an _SGML_ digester.
This digester is able to fragment an _SGML_ stream and extract sub content
matching with given _XPath like_ rules. The digester is explained [Digester here].

===Renderer===

The renderer module defines the logic to generate _User Interfaces_
starting from a JSON object. This module is detailed [Renderer here].

==Native==

The native abstraction layer isolates the _MU Core_ from the native implementation,
in this case on of {{{JRE}}} or {{{GWT-Javascript}}}.

===JRE Native===

Defines the implementation of the native layer with the Java Runtime Environment.

===GWT Native===

Defines the implementation of the native layer with Google Web Toolkit - Javascript.